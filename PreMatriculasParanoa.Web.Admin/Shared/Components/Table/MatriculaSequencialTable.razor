@using PreMatriculasParanoa.Domain.Models.ViewModels;

@inherits PreMatriculasParanoa.Web.Admin.Shared.CodeBase.Pages.PageBase

<MudSimpleTable Elevation="0" Striped="true">
    <thead>
        <tr>
            <th></th>
            @foreach (var escolaDestino in Model.EscolasDestino)
            {
                var totalVagas = (Model.MatriculasSequenciais.FirstOrDefault(m => m.IdEscolaDestino == escolaDestino.Id)?.TotalVagasDisponiveis ?? 0);
                var vagasPreenchidas = Model.MatriculasSequenciais.Where(m => m.IdEscolaDestino == escolaDestino.Id).Sum(s => s.TotalMatriculas);
                var vagasDisponiveis = (Model.MatriculasSequenciais.FirstOrDefault(m => m.IdEscolaDestino == escolaDestino.Id)?.TotalVagasDisponiveis ?? 0)
                - (Model.MatriculasSequenciais.FirstOrDefault(m => m.IdEscolaDestino == escolaDestino.Id)?.TotalMatriculas ?? 0);

                <th style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    <MudTooltip Text="@escolaDestino.Nome">
                        @escolaDestino.Nome
                    </MudTooltip>
                    <br />
                    <MudText Style="font-size: 9pt;">
                        Total de vagas: @totalVagas | vagas preenchidas: @vagasPreenchidas | vagas disponíveis: @vagasDisponiveis
                    </MudText>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var escolaOrigem in Model.EscolasOrigem)
        {
            <tr>
                <td style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap; text-align: right;">
                    <MudTooltip Text="@escolaOrigem.Nome">
                        @escolaOrigem.Nome
                    </MudTooltip>
                </td>
                @foreach (var escolaDestino in Model.EscolasDestino)
                {
                    var matriculaSequencial = Model.MatriculasSequenciais
                    .First(m => m.IdEscolaOrigem == escolaOrigem.Id && m.IdEscolaDestino == escolaDestino.Id);

                    <td style="text-align: center">
                        <MudNumericField Variant="Variant.Outlined" Margin="Margin.Dense" MaxLength="2" @bind-Value="@matriculaSequencial.TotalMatriculas"
                                         OnInternalInputChanged="(() => AtualizarMatriculaSequencial(matriculaSequencial))">
                        </MudNumericField>
                    </td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    [Inject] protected IPlanejamentoMatriculaSequencialApiContract ApiService { get; set; }

    [Parameter] public PlanejamentoMatriculaSequencialAgrupadoViewModel Model { get; set; }
    [Parameter] public EventCallback<PlanejamentoMatriculaSequencialAgrupadoViewModel> ModelChanged { get; set; }

    protected async Task AtualizarMatriculaSequencial(PlanejamentoMatriculaSequencialViewModel matriculaSequencial)
    {
        await Task.Run(() =>
        {
            Model.MatriculasSequenciais.First(m => m.IdEscolaOrigem == matriculaSequencial.IdEscolaOrigem
                && m.IdEscolaDestino == matriculaSequencial.IdEscolaDestino).TotalMatriculas = matriculaSequencial.TotalMatriculas;
        });
    }
}
